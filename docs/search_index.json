[["index.html", "Data Science Project Management Chapter 1 Data science and project management basics 1.1 PM schools of thought 1.2 Waterfall 1.3 Agile", " Data Science Project Management Kian Chapman-Raafat 2023-11-26 Chapter 1 Data science and project management basics Data science is at a funny age. Even five years ago a data science ‘team’ was often only one or two people working on a pet project. Today, mercifully, lots of us work in much larger teams filled with brilliant people. Some work in an ‘orchestra-style’ setup in multi-disciplinary teams where expert product/project/delivery managers collaborate substantively. There are still, however, many others who work in a in between place - where the more experienced data scientists in the team may take on project management (PM), as well as writing code. There is relatively limited material and courses out there for new data science project leads (who are working without embedded project managers) that recommend how to pick up relevant PM skills, or how to adapt existing PM methodologies to fit the unique needs of a product data science team. When I was in this position after a promotion I attended Agile workshops geared at software developers and found that they didn’t quite fit my needs. Over time I have made adaptations to my planning process when running a data science project, which I have brought together here. 1.1 PM schools of thought You don’t need to get certified as a project manager (unless you want to) but it’s worth taking some learning time to understand a little about the different project management frameworks out there as there are elements you can borrow from most of them - Waterfall, Agile (in its various forms including Scrum and Kanban,Extreme Programming XPM) and Lean (technically not Agile but very similar). 1.2 Waterfall Traditional waterfall methodologies put the planning work upfront - planning each stage of work needed to reach a final objective with timelines for each milestone and stage. Work on each stage is linear (no do-agains) and will probably include the production of a huge Gantt chart1 showing the route forward. This may work well for many fields like construction, where after you build a wall you probably don’t want to iterate on it by knocking it down and rebuilding it better this time round, but in data science, we need flexibility for iteration to refine our work. Waterfall planning requires knowing from the start exactly where you want to go and the best way to get there. I have rarely had the privilege of knowing either of these things at the start of a data science project, and I would argue some of the personal strengths of our field are experimentation, failing fast, and navigating very open questions so it would make sense that we need planning frameworks that honour this. 1.2.1 Short analytical plan with waterfall In the wild circumstance where you do happen to know both where you want to go and the best way to get there (lucky you), a quick alternative for a short project is to write a one or two-sided A4 ‘analytical plan’ with bullets asking the big questions and listing the things to get done, their main sub-tasks, and the ordering they need to be done in with key dates/timing estimations. If you are collaborating with others, each bullet/sub-bullet can be a Jira card or you can just work in a shared document and tick them off as you go. Feel free to use my template. 1.3 Agile Agile has a very different set of priorities from waterfall. It was originally developed as a software development PM tool and emphasizes using flexibility and customer collaboration to get the best result. There are several different flavours or frameworks of Agile, and each takes a slightly different approach on how to deal with the ‘12 Agile principles’2. I will go into each method in very brief detail later 1.3.6, or if you want to go deeper use the links in 1.1. Below I will cover some of the key points I think are important to know about Agile, but I recommend taking a much deeper look if it is new to you or you are particularly interested. This write up by Toptotal is a good place to start. If you are already familiar with Agile then you can skip this section. 1.3.1 Who Agile teams are typically multi-disciplinary built around skill sets and different roles. This might mean having team members such as a product owner, delivery lead, project manager, data engineer, and data scientist who each contribute in very defined and separate ways. 1.3.2 Meeting structures (ceremonies) Agile flavours handle this slightly differently, but typically in Agile there is a structured list of different meetings (known as ceremonies) that have different frequencies, attendees and purposes, all of which influence the work in their own way. Some of the common ones are: Stand up: a short (usually daily) meeting for all team members to share their progress and blockers, and what they plan to do next. Show and Tell: regular meetings (often weekly) with stakeholders/product owners to show them where your work has reached so far. This is a great chance to find anything that needs to be changed before you go too far down the wrong path and keep your key stakeholders fully involved. Retrospectives: semi-frequent meetings (at least fortnightly) to reflect as a group by speaking kindly but candidly about what has been going well or poorly. From this, we can find what changes the team wants to take on for the next period of work to address these concerns. 1.3.3 Record keeping and documentation In the spirit of accountability, Agile teams need somewhere to share progress and record it. If you have a project manager they may keep a board with details of what work is being done/needs to be done next and by who. If you don’t have a project manager you will need to keep it up to date yourself. Boards can be used to understand what other members of the team are up to and track work. There are a myriad ways to organise your board, but in terms of platforms to build a board, Jira is the most common but there are other simpler options such as Trello or Microsoft Planner. 1.3.4 Understanding the problem Agile seeks to understand what your customer needs through the lens of User Stories. These are a collection of short statements declaring what your customer wants to be able to do with your work and why, and give us a definition of ‘done’. An an example of this could be “As a customer specialist I want to be able to make it easy for customers to find relevant content, which increases their satisfaction and retention”. User statements can be from multiple stakeholders or angles but should provide the basis of why are are trying to do anything at all. They are normally collected through interviews and user research and can be collected together into groups or ‘Epics’ or broken down into smaller ‘Tasks’. 1.3.5 Iteration Another key concept is iteration and delivering a working ‘something’ quickly. This means splitting your user stories and features into things you want to work on now, vs things you want to add later. If the project gets cut, completing one user story and being able to deliver it to a customer is better than doing half of two which are unusable. Working this way also gives you checkpoints to see if your work is worth it to users before investing half a year, or perhaps show you that what you have built is already enough and adding the extras doesn’t add much value. 1.3.6 Differences in Agile flavours The key differences between the different Agile varieties/methodologies are: Kanban work is focused around planning work on a board. Scrum uses a board similar to Kanban, but breaks works short time periods known as sprints (1-4 weeks). Work is assigned to fit into what can be done in that time period. Extreme programming takes Scrum and adds processes that are particularly relevant for programming, such as refactoring. Lean is a neighbour to Agile and is focused on delivering good work fast. Image is sourced from: https://www.smartsheet.com/content/make-gantt-chart-google-sheets↩︎ Image is sourced from Olga Heismann: https://twitter.com/OlgaHeismann/status/1364857111201656835↩︎ "],["agile-adaptations.html", "Chapter 2 Agile adaptations 2.1 Start stupid - MVP 2.2 You don’t always get to choose your team 2.3 Do some R&amp;D upfront 2.4 Meet the players 2.5 Mixing Scrum and Kanban 2.6 Writing Jira/board tickets can be an art 2.7 Take the burden off show-and-tell meetings 2.8 Too many hats", " Chapter 2 Agile adaptations It is widely recognized that Agile is a better fit than waterfall for data science, but no one Agile methodology works perfectly: picking and choosing the best bits for your team is preferable. Some things that have worked well for me in the past are: 2.1 Start stupid - MVP Minimal viable product (MVP) is a concept from Agile that I love. An MVP is the simplest/stupidest solution to building something, or meeting a project brief before you go deeper and improve your work. For data science this nearly always means starting with a very unexciting and uninspiring solution, however this can be the best place to start. Explain the concept of MVP to your customers so they know to expect a very unpolished piece of work, and then let them see it. By sharing a basic but complete product you may find the needs of your company are less/different than you or your customer thought, and can avoid wasting a lot of time and effort reaching perfection on something unfit or too complex for real needs. The principle can be used for each stage of the data science process as well as the overall product. In practice this might mean facing a prediction problem with a smaller dataset before adding new variables or customer groups, starting with a simple model before a more elaborate one, loosely tuning a model before focusing on great scores, or building a quick and ugly dashboard before a beautiful one. When I am upgrading part of my work I call it MVP + n (however many improvement iterations you are on). 2.2 You don’t always get to choose your team I have been through many different configurations of multi-disciplinary teams and there is no one configuration across the industry. There are a few players I think you need to have, and if you can’t get them formally then you should try to find them informally: 1. The person/people to do the work! 2. A product owner: unless you are working on purely experimental R&amp;D, you need someone to want the output of your work, and to be willing to offer their time regularly to discuss it. Without this role, you risk building something amazing that nobody has time for or perhaps works counter to their aims. If you both share the objective of project success then both sides reap the rewards and it gives visibility to your work. 3. A delivery manager or person to hold you accountable: without this role, accountability can slip. As humans, we all make decisions for a reason, but inviting challenge should encourage you to make better and more justifiable decisions. Likewise, if work is behind, an external influence can be good to remind you what is important and set you back on the right track. If there is no formal role for this in your team, ask your boss or a more senior colleague if they would be willing to meet weekly or fortnightly to get to know your work and share their critical opinions. It can be uncomfortable but the more critical they can be, the better your work can be. 2.3 Do some R&amp;D upfront A useful concept across Agile frameworks is starting a project with a discovery stage and it can be a great way to start on the right track. “Discovery” is a term used to describe an introductory phase of a project focusing on aligning expectations, exploring assumptions and agreeing on goals and scope.3 For me in data science this means dedicating an appropriate amount of time depending on the size and complexity of your work (usually between two days and two weeks) to explore the area as a team to: Agree on the purpose of the work. Identify data sources you are going to need and start looking into access. Discuss and choose which technologies are going to be needed, and talk to a data engineer if you can. Explore how others have solved your problem in the past across your business and others. Do an academic search of the most promising models/techniques and the metrics that are important for them. Explore any open questions for the project, especially those that might be deal breakers (i.e. can we legally/ethically do this work, can we deploy, which models are suitable for scaling, is there any other work we should be waiting for). Consider project risks, mitigations, and stakeholders. Data science is a broad and fast-moving field, and it is common to work on completely different parts of the field from project to project. The Discovery period is great to bring everyone onto the same page and freshen up knowledge in the area and it’s important to share your learning from this phase together. This work should save time later and ensure that the project is heading in the right direction. It isn’t a natural fit for Jira cards, but try and keep a shared area/document with all of your learning, as no doubt you will need to dip back in to remind yourself why you made a choice. It’s not impossible that during this stage you might also ‘discover’ that your project isn’t a good idea. As sad as this may be it’s better to know after two days of work rather than six months, so embrace it. 2.4 Meet the players A kick-off meeting with your team during the discovery stage is the perfect time to learn from the rest of your team’s past experiences and set expectations that everyone can agree on going forward. A kick-off meeting should be a casual discussion about what practices people have loved or hated in previous teams and how they would like to try it this time around. It can cover issues such as work styles, meeting timings and managing Quality Assurance (QA) and Pull Requests (PRs). It means that the whole team reaches an agreement together about how they want to work. I have no prescriptions about what your team should agree on, but a few of the things previous project teams have opted for include: A limit on substantial changes in a single PR (approx 300 lines), and a timeline for another team member to take on and check the PR (24 hours). What languages/packages/libraries/frameworks match the project’s needs and the team’s previous experiences with them. Keeping standups short, but adding a weekly ‘I need advice’ session (or the opposite with long standups as the main touch point). Whether to work in defined blocks of time known as ‘Sprints’ (from Scrum) and how long the sprints should be, I favour two weeks. Alternatively, work in Kanban style and arrange your work blocks by the overarching task to be done - i.e. exploratory data analysis. How to label the size of jobs to be done (there are lots of fun options here i.e. XS = time to drink a coffee) 2.5 Mixing Scrum and Kanban As mentioned above, in Scrum, you aim to complete and deliver some complete version of your product in a strict time-boxed sprint, while in Kanban you focus on organizing work around a central task. I tend to use a hybrid approach given that data science work often needs longer than a two-week sprint to deliver a whole ‘something’. Similarly, if we use pure Kanban and are working on ‘model tuning’, there is nothing to guide us on when to stop or to remind us how long is too long to continue tuning. I prefer to borrow from both. I will pick a work theme, such as ‘model improvement’, then look at the steps I want to complete under that heading and estimate how long it should take. I can then split the overall theme in to smaller objectives and dedicate a sprint to each of the smaller objectives. The benefits are that it keeps work flexible, it has built in stop points after each sprint where I can readjust the plan depending on blockers, but still provides soft deadlines to motivate work. 2.6 Writing Jira/board tickets can be an art A common system to keep track of what needs to be done, and who is working on it, is Jira. If you haven’t seen it before, here is an introduction video from the Jira team. Jira lets you build project boards and write a ticket for each to-do task. Team members can then be assigned to these tickets, and mark them as complete when they are done. In Jira you can use preset board headings or columns headers. Headings I like to use are: Backlog: jobs that we know we need to do in the future but aren’t part of the current sprint/work phase. To do: tasks that are ready for progress to start. In progress: someone has claimed the job and has started work on it. QA: a place to move a task when you want another team member to check your work. If substantial rework is needed you can pull this back into to do or make a new card for the work. Discuss/Blocked/Help: a place for people to mark work that needs an extra something to progress. Done: passed QA, nothing more to do. Tasks should move from left to right (except for blocked), and there are ways to highlight priority such as ordering within a column or adding critical markers. 2.6.1 Splitting tasks Splitting the week’s work into small tasks that can be taken on by a single team member can be tricky - how do you split exploratory data analysis into work for three data scientists and make sure everyone always has something they can do? I have seen some teams split the job by variables (i.e. “I will take internal data sources, you can take external ones”), while others split it by stages (i.e.” I will do outlier removal, you can handle missing data”). There are clear advantages to both, in the former the team member will become an expert on their data points, and in the later approaches taken will be consistent across variables. I have never seen it done in a good way to hit both ideals, and would love to hear alternatives and the way you do this in your team. 2.7 Take the burden off show-and-tell meetings Show-and-tell meetings are important to catch domain-specific knowledge from your stakeholers and validate your work so far. It can be tempting to reschedule these meetings until you have a whole ‘thing’ to show, but in data science our project might not have such obvious end points. Putting off meetings when progress has been slow could mean we miss answers to our questions that our customers hold. I recommend keeping a regular meeting in the diary with a friendly, working level stakeholder and committing to these meetings even if progress is less than you hoped. One of my colleagues4 had a great way to take the stress out of preparing for these meetings. She kept a live ‘update slide pack’ which was added to from day one of the project until the end. It was a space where team members could drop in important things they have done and learnt during the week, building loose documentation as you go. It is useful to have this pack to go back to check timelines, decision justification, and meant when it was time to present to stakeholders, that all the material was already there and just needed a bit of cleaning up. This avoids a frantic team effort to pull material together at short notice and means you always have some material (nearly) ready to go. 2.8 Too many hats For the project lead who does a little of everything I would recommend separating your roles mentally to help you prioritize. My order of priority is usually: Planning/organization/preparation meetings - no one else has responsibility for these (unless you delegate parts) so it makes sense to put your focus here. Removing whatever blockers there are - working to get the answers the team needs to proceed, or clearing up the PRs that are clogging progress is nearly equally high on priorities unless you want your project to slow to a crawl. Take an easy ticket - I enjoy the opportunity to keep coding, but given this is a lower priority on my list I am careful not to take a card that is overly ambitious for the time I have. If I get caught up in meetings or ad-hoc issues crop up, the work I had started could easily go stale and become a blocker. As a default, I will take a small task, or if I plan to take a bigger task then it has to be taken with intention - i.e. clear diary time to work on it. https://aginic.com/blog/agile-discovery-phase-the-ultimate-guide/↩︎ Cloudy Carnegie, thank you!↩︎ "],["overall-framework.html", "Chapter 3 Overall framework 3.1 My way of working 3.2 Tiny team planning 3.3 Your turn", " Chapter 3 Overall framework 3.1 My way of working So now we have lots of thoughts about how to run a data science project. How do they work together? My preferred framework is: Project Ideation: A project is first mentioned or thought of by me/someone else. I consider it ideation the moment someone writes the idea down somewhere. This is now on your to-do list to look into in more depth. Mini-Discovery: The next stage is a brief investigation by 1 person to check that the project has an audience, data to support it, and makes sense. Write a project objective statement about the why, what and risks with this work. Work approval: Decide if it’s worth proceeding with. This could be decided by you if you are in a position to do so, or a senior colleague. Team-Kick Off Meeting: Form a team with the skills you discovered you would need during the mini-discovery, and get to know them and their ways of working. Discovery Stage: A more legit discovery stage. See details in previous sections, but get to know your customers, the problem, and the landscape. Use this to build user stories or a requirements list so you know what success looks like. Prioritise these requirements ruthlessly or risk never being done. If it helps you can ask your stakeholders to order by priority, or select the 2-5 most important ones. At this moment you may realise you need extra team members with other skills. Planning Stage: You’ve fully investigated the problem, now find one or two solutions that meet the requirements you have gathered. Plan what the work would look like, and share the ideas with stakeholders. Agree which solution to go with, what the MVP first deliverable should be, and when it needs to be done by. Building the MVP: This is your usual data science project steps. Each stage should have a customer check-in and I recommend having retrospectives every 2-4 weeks to nip issues in the bud: 7.1 Data collection 7.2 EDA 7.3 Data preparation 7.4 Model building 7.5 Tuning: The model may change a lot in the future so don’t waste too long on tuning for the first MVP 7.6 Deployment: Have it running somewhere shareable, and as above don’t spend too long here for the first MVP Show and tell with stakeholders: Have a wider show and tell to show them your work. This is needed to get the acceptance that you have met the requirements with your build. Re-planning for the next round of improvements: If stakeholders aren’t happy with the output, your next short sprint should be to rectify this. If they are happy but want the next stage, then plan the next features to add in the next MVP round. If your stakeholders are totally happy, then skip the next 2 stages. Build MVP + 1: Add the next round of improvements Build MVP + n: Continue improvements until you reach customer acceptance Finalize the Product: We are getting close, make your work production ready by adding testing, model monitoring, and full deployment set up. Tidying up: Review and update documentation and communicate your work via presentations to audiences outside your team to increase your impact After-Care: Continue monitoring the model and if there are problems decide if they need to be a quick fix or another sprint of work. Check-in on use by the customer and consider if there are spin-out projects this piece of work has unearthed. 3.2 Tiny team planning For small project teams of one or two, maintaining a full Jira board and doing all Agile ceremonies is likely overkill. However, there is still some value in using the concepts in picking out the parts that work for you. For example keeping show-and-tell meetings with customers, a Jira board with a few broad tickets to record progress (and help with accountability), and weekly mini-retrospectives to take time to consider the week gone. 3.3 Your turn All these points are from trial and error, personal reading and learning from others around me and I hope it has given you a few ideas for your work. Many are obvious or common sense but in a rush to get going, they can accidentally be forgotten about to the project’s detriment. If you would like a thorough literature review Prince Canuma’s Data Science Project Management is a brilliant look at all the options. Take the points from my rambling that would be helpful and try blending them with your current methods, see what works for you in practice. If you do things differently (or the same) let me know, I would love to add tips to this article and credit you! My github handle is rosenkavalier. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
